import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import * as nodemailer from 'nodemailer';

@Injectable()
export class EmailService {
  private transporter: nodemailer.Transporter;

  constructor(private configService: ConfigService) {
    this.transporter = nodemailer.createTransport({
      host: this.configService.get('email.smtpServer'),
      port: this.configService.get('email.port'),
      secure: this.configService.get('email.enableSsl'), // true for SSL
      auth: {
        user: this.configService.get('email.username'),
        pass: this.configService.get('email.password'),
      },
      tls: {
        rejectUnauthorized: false // Accept self-signed certificates
      },
      debug: true, // Enable debug output
      logger: true // Log to console
    });

    // Test connection on startup
    this.verifyConnection();
  }

  private async verifyConnection(): Promise<void> {
    try {
      await this.transporter.verify();
      console.log('‚úÖ SMTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É:', error);
    }
  }

  async sendPasswordReset(email: string, newPassword: string): Promise<void> {
    try {
      const emailBody = this.generatePasswordResetEmailBody(newPassword);
      console.log(`üìß –û—Ç–ø—Ä–∞–≤–∫–∞ email —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –Ω–∞ ${email}`);
      
      const info = await this.transporter.sendMail({
        from: `"${this.configService.get('email.fromName')}" <${this.configService.get('email.fromEmail')}>`,
        to: email,
        subject: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è - MoeShop',
        html: emailBody,
      });

      console.log(`‚úÖ Email —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${email}`);
      console.log('Message ID:', info.messageId);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –Ω–∞ ${email}:`, error);
      throw error;
    }
  }

  private generatePasswordResetEmailBody(newPassword: string): string {
    const sb: string[] = [];
    
    sb.push('<!DOCTYPE html>');
    sb.push('<html><head><meta charset="utf-8"></head><body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">');
    sb.push('<div style="max-width: 600px; margin: 0 auto; padding: 20px;">');
    
    // Header
    sb.push('<div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; text-align: center; margin-bottom: 20px;">');
    sb.push('<h1 style="color: #007bff; margin: 0;">MoeShop</h1>');
    sb.push('<h2 style="color: #dc3545; margin: 10px 0 0 0;">–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è</h2>');
    sb.push('</div>');
    
    // Main info
    sb.push('<div style="background-color: #fff; border: 1px solid #dee2e6; border-radius: 8px; padding: 20px; margin-bottom: 20px;">');
    sb.push('<p>–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ MoeShop.</p>');
    sb.push(`<p><strong>–í–∞—à –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:</strong> <span style="background-color: #f8f9fa; padding: 5px 10px; border-radius: 4px; font-family: monospace; font-size: 16px;">${newPassword}</span></p>`);
    sb.push('<p style="color: #dc3545;"><strong>–í–∞–∂–Ω–æ:</strong> –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –ø–∞—Ä–æ–ª—å –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ.</p>');
    sb.push('</div>');
    
    // Footer
    sb.push('<div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #dee2e6; color: #6c757d;">');
    sb.push('<p style="margin: 5px 0;">–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ MoeShop</p>');
    sb.push('<p style="margin: 5px 0; font-size: 12px;">–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –Ω–µ–≥–æ.</p>');
    sb.push('</div>');
    
    sb.push('</div>');
    sb.push('</body></html>');
    
    return sb.join('\n');
  }

  async sendOrderConfirmation(email: string, order: any): Promise<void> {
    try {
      const emailBody = this.generateOrderConfirmationEmailBody(order);
      console.log(`üìß –û—Ç–ø—Ä–∞–≤–∫–∞ email –Ω–∞ ${email} –¥–ª—è –∑–∞–∫–∞–∑–∞ #${order.id}`);

      const info = await this.transporter.sendMail({
        from: `"${this.configService.get('email.fromName')}" <${this.configService.get('email.fromEmail')}>`,
        to: email,
        subject: `–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #${order.id} - MoeShop`,
        html: emailBody,
      });

      console.log(`‚úÖ Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${email} –¥–ª—è –∑–∞–∫–∞–∑–∞ #${order.id}`);
      console.log('Message ID:', info.messageId);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –Ω–∞ ${email} –¥–ª—è –∑–∞–∫–∞–∑–∞ #${order.id}:`, error);
      throw error;
    }
  }

  private generateOrderConfirmationEmailBody(order: any): string {
    const sb: string[] = [];
    sb.push('<!DOCTYPE html>');
    sb.push('<html><head><meta charset="utf-8"></head><body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">');
    sb.push('<div style="max-width: 600px; margin: 0 auto; padding: 20px;">');

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    sb.push('<div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; text-align: center; margin-bottom: 20px;">');
    sb.push('<h1 style="color: #007bff; margin: 0;">MoeShop</h1>');
    sb.push('<h2 style="color: #28a745; margin: 10px 0 0 0;">–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</h2>');
    sb.push('</div>');

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
    sb.push('<div style="background-color: #fff; border: 1px solid #dee2e6; border-radius: 8px; padding: 20px; margin-bottom: 20px;">');
    sb.push(`<p><strong>–ó–∞–∫–∞–∑:</strong> #${order.id}</p>`);
    sb.push(`<p><strong>–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:</strong> ${new Date(order.orderDate).toLocaleString('ru-RU')}</p>`);
    sb.push('<p style="color: #28a745;"><strong>–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω –∏ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É!</strong></p>');
    sb.push('</div>');

    // –¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ
    sb.push('<div style="background-color: #fff; border: 1px solid #dee2e6; border-radius: 8px; padding: 20px; margin-bottom: 20px;">');
    sb.push('<h3 style="color: #007bff; margin-top: 0;">–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:</h3>');
    sb.push('<table style="width: 100%; border-collapse: collapse;">');
    sb.push('<thead>');
    sb.push('<tr style="background-color: #f8f9fa;">');
    sb.push('<th style="text-align: left; padding: 10px; border-bottom: 1px solid #dee2e6;">–¢–æ–≤–∞—Ä</th>');
    sb.push('<th style="text-align: center; padding: 10px; border-bottom: 1px solid #dee2e6;">–ö–æ–ª-–≤–æ</th>');
    sb.push('<th style="text-align: right; padding: 10px; border-bottom: 1px solid #dee2e6;">–¶–µ–Ω–∞</th>');
    sb.push('<th style="text-align: right; padding: 10px; border-bottom: 1px solid #dee2e6;">–°—É–º–º–∞</th>');
    sb.push('</tr>');
    sb.push('</thead>');
    sb.push('<tbody>');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ orderItems —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
    if (order.orderItems && Array.isArray(order.orderItems)) {
      for (const item of order.orderItems) {
        const itemPrice = parseFloat(item.priceAtOrder);
        const itemTotal = item.quantity * itemPrice;
        sb.push('<tr>');
        sb.push(`<td style="padding: 10px; border-bottom: 1px solid #f1f3f4;">${item.product?.name || '–¢–æ–≤–∞—Ä'}</td>`);
        sb.push(`<td style="text-align: center; padding: 10px; border-bottom: 1px solid #f1f3f4;">${item.quantity} —à—Ç.</td>`);
        sb.push(`<td style="text-align: right; padding: 10px; border-bottom: 1px solid #f1f3f4;">${itemPrice.toFixed(2)} ‚ÇΩ</td>`);
        sb.push(`<td style="text-align: right; padding: 10px; border-bottom: 1px solid #f1f3f4;"><strong>${itemTotal.toFixed(2)} ‚ÇΩ</strong></td>`);
        sb.push('</tr>');
      }
    } else {
      // –ï—Å–ª–∏ orderItems –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
      sb.push('<tr>');
      sb.push('<td colspan="4" style="text-align: center; padding: 20px; color: #6c757d;">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</td>');
      sb.push('</tr>');
    }

    sb.push('</tbody>');
    sb.push('</table>');
    sb.push('</div>');

    // –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    sb.push('<div style="background-color: #f8f9fa; border-radius: 8px; padding: 20px;">');
    sb.push(`<p style="font-size: 18px; margin: 5px 0;"><strong>–û–±—â–∞—è —Å—É–º–º–∞: ${parseFloat(order.totalAmount).toFixed(2)} ‚ÇΩ</strong></p>`);

    if (order.walletUsed) {
      sb.push(`<p style="color: #dc3545; margin: 5px 0;">–°–ø–∏—Å–∞–Ω–æ —Å –∫–æ—à–µ–ª—å–∫: ${parseFloat(order.walletUsed).toFixed(2)} ‚ÇΩ</p>`);
    }

    if (order.walletEarned) {
      sb.push(`<p style="color: #28a745; margin: 5px 0;">–ù–∞—á–∏—Å–ª–µ–Ω–æ –Ω–∞ –∫–æ—à–µ–ª–µ–∫: +${parseFloat(order.walletEarned).toFixed(2)} ‚ÇΩ</p>`);
    }

    sb.push(`<p style="font-size: 20px; color: #007bff; margin: 10px 0 0 0;"><strong>–ö –æ–ø–ª–∞—Ç–µ: ${parseFloat(order.finalAmount).toFixed(2)} ‚ÇΩ</strong></p>`);
    sb.push('</div>');

    // –§—É—Ç–µ—Ä
    sb.push('<div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #dee2e6; color: #6c757d;">');
    sb.push('<p style="margin: 5px 0;">–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ MoeShop</p>');
    sb.push('<p style="margin: 5px 0; font-size: 12px;">–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –Ω–µ–≥–æ.</p>');
    sb.push('</div>');

    sb.push('</div>');
    sb.push('</body></html>');

    return sb.join('\n');
  }
}
